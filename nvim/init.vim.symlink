syntax on

set noerrorbells
" bs
set backspace=indent,eol,start
" ts sts
set tabstop=4 softtabstop=4
set shiftwidth=4
" et / noet
set expandtab
set smartindent
" nu / rnu (relativenumber)
set nu rnu
set wrap
" smartcase will override ignorecase if there's uppper case.
" scs ic
set smartcase
set ignorecase
" hls is
set hlsearch
set incsearch
"
set noswapfile
" backup is already off as default
set nobackup
" bex
set backupext=.bak
set undodir=~/.vim/undodir
set undofile
" tab navigation mappings
map tn :tabn<CR>
map tp :tabp<CR>
map tm :tabm
map tt :tabnew
map tc :tabclose
map ts :tab split<CR>

let mapleader = " "
nnoremap <leader>j <C-W>j
nnoremap <leader>k <C-W>k
nnoremap <leader>l <C-W>l
nnoremap <leader>h <C-W>h

" go to normal mode
inoremap <C-c> <ESC>
" deselect highlight search
nnoremap <C-l> :noh<CR>

let g:ale_disable_lsp = 1

call plug#begin('~/.vim/plugged')

Plug 'liuchengxu/space-vim-dark'
Plug 'edkolev/tmuxline.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/nerdcommenter'
Plug 'w0rp/ale'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-surround'
Plug 'elzr/vim-json'
Plug 'mbbill/undotree'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'preservim/nerdtree'
Plug 'honza/vim-snippets'

call plug#end()

colorscheme space-vim-dark
" set termguicolors

" Airline config
let g:airline_powerline_fonts = 0
let g:airline_theme = 'violet'
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1
" show tab number in tab line
let g:airline#extensions#tabline#tab_nr_type = 1

if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif

" Tmuxline
let g:tmuxline_theme = 'powerline'
let g:tmuxline_preset = 'powerline'
let g:airline#extensions#tmuxline#enabled = 1
let g:tmuxline_powerline_separators = 0

" Fzf
nnoremap <leader>p :Files<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>f :Ag<CR>
nnoremap <leader>w :Ag <C-R><C-W><CR>
let g:fzf_preview_window = ''
let g:fzf_buffers_jump = 1

" Use <TAB> to select the popup menu:
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" ALE
let g:ale_set_highlights = 0
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '❍'
let g:ale_linters = {
\   'python': ['flake8 --max-line-length=88'],
\}
let g:ale_fixers = {
\   '*': ['trim_whitespace'],
\   'python': ['black', 'isort']
\}
let g:ale_fix_on_save = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" Undotree
nnoremap <F3> :UndotreeToggle<CR>

" Fugitive
nnoremap gs :G<CR>
nnoremap gh :diffget //3<CR>
nnoremap gu :diffget //2<CR>

let &t_SI = "\e[3 q"
let &t_EI = "\e[3 q"

" Coc
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
" Symbol renaming
nmap <leader>r <Plug>(coc-rename)
" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Jsonc
autocmd FileType json syntax match Comment +\/\/.\+$+

" NerdTree
nnoremap <leader>e :NERDTreeFind<CR>

" Python
let g:loaded_python_provider = 0
let g:python3_host_prog = '/usr/local/bin/python3'

" Snippets
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'
